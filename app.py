import streamlit as st
import pandas as pd
from io import BytesIO
import zipfile
import time

# Quan tr·ªçng: ƒê√¢y l√† n∆°i ·ª©ng d·ª•ng Giao di·ªán (Th√¢n x√°c) g·ªçi ƒë·∫øn th∆∞ vi·ªán Logic (N√£o)
# D√≤ng n√†y ch·ªâ ho·∫°t ƒë·ªông sau khi b·∫°n tri·ªÉn khai l√™n Streamlit Cloud v·ªõi Secrets ƒë√∫ng c√°ch.
try:
    from core_logic.processor import DataProcessor
    from core_logic.word_handler import process_single_document_to_buffer
except ImportError:
    st.error("L·ªói nghi√™m tr·ªçng: Kh√¥ng th·ªÉ nh·∫≠p th∆∞ vi·ªán 'core_logic'. H√£y ch·∫Øc ch·∫Øn b·∫°n ƒë√£ tri·ªÉn khai ƒë√∫ng c√°ch.")
    # M√¥ ph·ªèng class ƒë·ªÉ app kh√¥ng b·ªã crash ho√†n to√†n khi ch·∫°y local
    class DataProcessor:
        def __init__(self, *args, **kwargs): pass
        def check(self): return [], [], [], pd.DataFrame()
        def export_clean_file_to_buffer(self): return BytesIO()
    def process_single_document_to_buffer(self, *args, **kwargs): return BytesIO(), set()

# --- Kh·ªüi t·∫°o Session State ---
if 'df' not in st.session_state:
    st.session_state.df = None
    st.session_state.data_config = None
    st.session_state.data_checker = None
    st.session_state.selected_sheet = None
    st.session_state.uploaded_excel_name = ""

# --- Giao di·ªán Streamlit ---
st.set_page_config(page_title="Tr√¨nh t·∫°o H·ªì s∆° T·ª± ƒë·ªông", page_icon="üìÑ", layout="wide")

# --- Sidebar ---
with st.sidebar:
    st.title("‚öôÔ∏è B·∫£ng ƒêi·ªÅu Khi·ªÉn")
    st.markdown("---")
    
    uploaded_excel = st.file_uploader("1. T·∫£i l√™n file Excel d·ªØ li·ªáu:", type=["xlsx", "xls"])
    
    if uploaded_excel:
        if uploaded_excel.name != st.session_state.uploaded_excel_name:
            st.session_state.uploaded_excel_name = uploaded_excel.name
            st.session_state.df = None # Reset khi c√≥ file m·ªõi
        
        try:
            xls = pd.ExcelFile(uploaded_excel)
            sheet_names = xls.sheet_names
            st.session_state.selected_sheet = st.selectbox("Ch·ªçn sheet d·ªØ li·ªáu:", sheet_names)
            
            if st.button("T·∫£i D·ªØ li·ªáu t·ª´ Sheet"):
                st.session_state.df = pd.read_excel(uploaded_excel, sheet_name=st.session_state.selected_sheet)
                st.session_state.data_config = None # Reset config khi t·∫£i l·∫°i data
                st.success(f"ƒê√£ t·∫£i {len(st.session_state.df)} d√≤ng t·ª´ sheet '{st.session_state.selected_sheet}'.")

        except Exception as e:
            st.error(f"L·ªói ƒë·ªçc file Excel: {e}")
            st.session_state.df = None

    uploaded_templates = st.file_uploader("2. T·∫£i l√™n file Word m·∫´u:", type=["docx"], accept_multiple_files=True)
    st.markdown("---")

# --- Khu v·ª±c ch√≠nh ---
st.title("üìÑ Tr√¨nh t·∫°o H·ªì s∆° T·ª± ƒë·ªông")
st.markdown(f"Ch√†o Boss, ch√†o m·ª´ng ƒë·∫øn v·ªõi ph·∫ßn m·ªÅm. Th·ªùi gian hi·ªán t·∫°i: {datetime.now().strftime('%H:%M:%S, %d/%m/%Y')}")

if st.session_state.df is not None:
    tab1, tab2, tab3 = st.tabs(["1Ô∏è‚É£ C·∫•u h√¨nh & Ki·ªÉm tra", "2Ô∏è‚É£ T·∫°o H·ªì s∆°", "üìà Xem D·ªØ li·ªáu"])

    with tab1:
        st.header("C·∫•u h√¨nh v√† Ki·ªÉm tra D·ªØ li·ªáu")
        with st.form("data_check_form"):
            st.subheader("C·∫•u h√¨nh c·ªôt b·∫Øt bu·ªôc v√† gi√° tr·ªã h·ª£p l·ªá")
            
            cols = st.columns(3)
            column_names = st.session_state.df.columns
            config_inputs = {}

            for i, col_name in enumerate(column_names):
                with cols[i % 3]:
                    st.markdown(f"**{col_name}**")
                    is_mandatory = st.checkbox("B·∫Øt bu·ªôc", key=f"mand_{col_name}")
                    valid_values = st.text_input("Gi√° tr·ªã h·ª£p l·ªá (c√°ch nhau b·ªüi d·∫•u ph·∫©y)", key=f"valid_{col_name}")
                    config_inputs[col_name] = (is_mandatory, valid_values)
            
            submitted = st.form_submit_button("L∆∞u C·∫•u h√¨nh")
            if submitted:
                st.session_state.data_config = {}
                for col_name, (is_mandatory, valid_values_str) in config_inputs.items():
                    st.session_state.data_config[col_name] = {
                        "mandatory": is_mandatory,
                        "valid_values": [v.strip() for v in valid_values_str.split(',')] if valid_values_str else None
                    }
                st.success("ƒê√£ l∆∞u c·∫•u h√¨nh ki·ªÉm tra!")

        if st.session_state.data_config:
            if st.button("üîé B·∫Øt ƒë·∫ßu Ki·ªÉm tra D·ªØ li·ªáu"):
                with st.spinner("ƒêang ki·ªÉm tra..."):
                    checker = DataProcessor(st.session_state.df, st.session_state.data_config, log_func=st.info)
                    errors, warnings, _, _ = checker.check()
                    st.session_state.data_checker = checker # L∆∞u l·∫°i ƒë·ªÉ xu·∫•t file
                
                if not errors and not warnings:
                    st.success("‚úÖ D·ªØ li·ªáu ho√†n to√†n h·ª£p l·ªá!")
                else:
                    st.warning(f"Ph√°t hi·ªán {len(errors)} l·ªói v√† {len(warnings)} c·∫£nh b√°o.")
                    if errors:
                        with st.expander("‚ùå Xem c√°c l·ªói nghi√™m tr·ªçng", expanded=True):
                            for error in errors: st.error(error)
                    if warnings:
                        with st.expander("‚ö†Ô∏è Xem c√°c c·∫£nh b√°o"):
                            for warning in warnings: st.warning(warning)
            
            if st.session_state.data_checker:
                clean_file_buffer = st.session_state.data_checker.export_clean_file_to_buffer()
                st.download_button(
                    label="üì• T·∫£i v·ªÅ File Excel ƒë√£ l√†m s·∫°ch",
                    data=clean_file_buffer,
                    file_name="cleaned_data.xlsx"
                )

    with tab2:
        st.header("T·∫°o H·ªì s∆° h√†ng lo·∫°t")
        if not uploaded_templates:
            st.warning("Vui l√≤ng t·∫£i l√™n √≠t nh·∫•t m·ªôt file Word m·∫´u ·ªü thanh b√™n.")
        else:
            if st.button("üöÄ B·∫Øt ƒë·∫ßu T·∫°o To√†n b·ªô H·ªì s∆°", type="primary"):
                with st.spinner("ƒêang t·∫°o c√°c file Word..."):
                    zip_buffer = BytesIO()
                    with zipfile.ZipFile(zip_buffer, "a", zipfile.ZIP_DEFLATED, False) as zip_file:
                        progress_bar = st.progress(0)
                        total_rows = len(st.session_state.df)
                        
                        # Logic t·∫°o h·ªì s∆°
                        # Gi·∫£ ƒë·ªãnh: c·ªôt ƒë·∫ßu ti√™n trong excel l√† t√™n template c·∫ßn d√πng
                        template_col_name = st.session_state.df.columns[0]
                        
                        for i, row in st.session_state.df.iterrows():
                            template_name_in_row = str(row[template_col_name]).strip()
                            
                            # T√¨m template ph√π h·ª£p
                            chosen_template_buffer = None
                            for template_file in uploaded_templates:
                                if template_name_in_row.lower() in template_file.name.lower():
                                    chosen_template_buffer = BytesIO(template_file.getvalue())
                                    break
                            
                            if chosen_template_buffer:
                                mapping = row.to_dict()
                                doc_buffer, warnings = process_single_document_to_buffer(chosen_template_buffer, mapping)
                                output_filename = f"{template_name_in_row}_{i+1}.docx"
                                zip_file.writestr(output_filename, doc_buffer.getvalue())
                            
                            progress_bar.progress((i + 1) / total_rows)
                            time.sleep(0.05) # Gi·∫£ l·∫≠p ƒë·ªô tr·ªÖ

                    st.success("Ho√†n th√†nh! T·∫£i file ZIP ch·ª©a t·∫•t c·∫£ h·ªì s∆° ·ªü d∆∞·ªõi.")
                    st.download_button(
                        label="üì• T·∫£i v·ªÅ File ZIP ch·ª©a To√†n b·ªô H·ªì s∆°",
                        data=zip_buffer,
                        file_name="Tat_ca_Ho_so.zip",
                        mime="application/zip"
                    )

    with tab3:
        st.header("Xem tr∆∞·ªõc D·ªØ li·ªáu")
        st.dataframe(st.session_state.df)

else:
    st.info("Ch√†o m·ª´ng Boss! Vui l√≤ng t·∫£i l√™n file Excel ·ªü thanh b√™n tr√°i ƒë·ªÉ b·∫Øt ƒë·∫ßu.")